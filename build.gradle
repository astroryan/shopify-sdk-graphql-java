plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.9'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java-library'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'com.gradleup.nmcp' version '0.0.8'
}

group = 'io.github.astroryan'
version = '1.2.0-SNAPSHOT-40'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    graphqlJavaVersion = '21.3'
    okhttpVersion = '4.12.0'
    jacksonVersion = '2.16.0'
    junitVersion = '5.10.1'
    mockitoVersion = '5.7.0'
    slf4jVersion = '2.0.9'
}

configurations.all {
    resolutionStrategy {
        // Force a specific version of snakeyaml
        force 'org.yaml:snakeyaml:2.2'
    }
}

dependencies {
    // Explicitly add snakeyaml to avoid android variant issues
    implementation 'org.yaml:snakeyaml:2.2'
    
    // Test fixtures - exclude snakeyaml to avoid conflicts
    testImplementation ('com.github.javafaker:javafaker:1.0.2') {
        exclude group: 'org.yaml', module: 'snakeyaml'
    }
    testImplementation ('org.skyscreamer:jsonassert:1.5.1') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    
    // Jackson version management - ensure consistent versions
    implementation platform("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // GraphQL
    implementation "com.graphql-java:graphql-java:${graphqlJavaVersion}"
    implementation "com.graphql-java:graphql-java-extended-scalars:21.0"
    implementation "io.leangen.graphql:spqr:0.12.0"
    
    // HTTP Client
    implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    
    // JSON Processing
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    
    // Crypto
    implementation 'org.bouncycastle:bcprov-jdk18on:1.76'
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    
    // Logging
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    
    // Testing
    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.junit.platform:junit-platform-suite:1.10.1"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${okhttpVersion}"
}

tasks.named('test') {
    useJUnitPlatform {
        // 기본 테스트에서는 integration 태그 제외
        excludeTags 'integration', 'integration-disabled'
    }
    finalizedBy jacocoTestReport
    
    // Enable experimental Byte Buddy for Java 23 compatibility
    jvmArgs '-Dnet.bytebuddy.experimental=true'
}

// 통합 테스트 태스크 (MockWebServer 기반)
task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
    
    // Enable experimental Byte Buddy for Java compatibility
    jvmArgs '-Dnet.bytebuddy.experimental=true'
    
    // Set system properties for test environment
    systemProperty 'spring.profiles.active', 'test'
    systemProperty 'shopify.use-ssl', 'false'
    systemProperty 'test.mode', 'true'
    
    // Set timeout for the entire test suite
    timeout = Duration.ofMinutes(5)
    
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
        showStandardStreams = true  // Show test output
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

jar {
    enabled = true
    archiveClassifier = ''
}

bootJar {
    enabled = false
}

// Configure javadoc to work with Lombok
javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    exclude '**/package-info.java'
    classpath = configurations.compileClasspath
}

// Test fixture resources
sourceSets {
    test {
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

// Publishing configuration
publishing {
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.findProperty("mavenCentralUsername") ?: System.getenv("MAVEN_CENTRAL_USERNAME")
                password = project.findProperty("mavenCentralPassword") ?: System.getenv("MAVEN_CENTRAL_PASSWORD")
            }
        }
         maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/astroryan/shopify-sdk-java")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    
    publications {
        shopifySdk(MavenPublication) {
            from components.java
            
            artifactId = 'shopify-spring-sdk'
            
            pom {
                name = 'Shopify Spring SDK'
                description = 'A comprehensive Spring Boot SDK for Shopify Admin GraphQL API'
                url = 'https://github.com/astroryan/shopify-sdk-java'
                
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                
                developers {
                    developer {
                        id = 'astroryan'
                        name = 'Ryan Kim'
                        email = 'ryan@example.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/astroryan/shopify-sdk-java.git'
                    developerConnection = 'scm:git:ssh://github.com:astroryan/shopify-sdk-java.git'
                    url = 'https://github.com/astroryan/shopify-sdk-java'
                }
            }
        }
    }
}

// Signing configuration
signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingPassword = findProperty("signingPassword")  
    def signingKey = findProperty("signingKey")
    
    if (signingKeyId && signingPassword && signingKey) {
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    }
    
    sign publishing.publications.shopifySdk
}

// Configure signing tasks
tasks.withType(Sign) {
    onlyIf {
        // Only sign when publishing to Maven Central
        gradle.taskGraph.hasTask("publishShopifySdkPublicationToOSSRHRepository")
    }
}

// Make publish task depend on signing
tasks.named("publishShopifySdkPublicationToOSSRHRepository") {
    dependsOn "signShopifySdkPublication"
}

// Configure nmcp plugin for Maven Central Portal
nmcp {
    publishAllPublications {
        username = project.findProperty("mavenCentralUsername") ?: System.getenv("MAVEN_CENTRAL_USERNAME")
        password = project.findProperty("mavenCentralPassword") ?: System.getenv("MAVEN_CENTRAL_PASSWORD")
        publicationType = "USER_MANAGED" // or "AUTOMATIC"
    }
}

// Task to display publish info
task publishInfo {
    doLast {
        println "Publishing ${project.group}:${project.name}:${project.version}"
        println "To Maven Central via Portal API"
    }
}