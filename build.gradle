import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.9'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java-library'
    id 'jacoco'
    id 'com.vanniktech.maven.publish' version '0.28.0'
    id 'signing'
}

group = 'io.github.astroryan'
version = '1.2.1'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    graphqlJavaVersion = '21.3'
    okhttpVersion = '4.12.0'
    jacksonVersion = '2.16.0'
    junitVersion = '5.10.1'
    mockitoVersion = '5.7.0'
    slf4jVersion = '2.0.9'
}

configurations.all {
    resolutionStrategy {
        // Force a specific version of snakeyaml
        force 'org.yaml:snakeyaml:2.2'
    }
}

dependencies {
    // Explicitly add snakeyaml to avoid android variant issues
    api 'org.yaml:snakeyaml:2.2'
    
    // Test fixtures - exclude snakeyaml to avoid conflicts
    testImplementation ('com.github.javafaker:javafaker:1.0.2') {
        exclude group: 'org.yaml', module: 'snakeyaml'
    }
    testImplementation ('org.skyscreamer:jsonassert:1.5.1') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    
    // Jackson version management - ensure consistent versions
    api platform("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")

    // Spring Boot
    api 'org.springframework.boot:spring-boot-starter'
    api 'org.springframework.boot:spring-boot-starter-web'
    api 'org.springframework.boot:spring-boot-starter-webflux'
    api 'org.springframework.boot:spring-boot-starter-validation'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // GraphQL
    api "com.graphql-java:graphql-java:${graphqlJavaVersion}"
    implementation "com.graphql-java:graphql-java-extended-scalars:21.0"
    api "io.leangen.graphql:spqr:0.12.0"
    
    // HTTP Client
    api "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    
    // JSON Processing
    api "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // JWT
    api 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    
    // Crypto
    api 'org.bouncycastle:bcprov-jdk18on:1.76'
    
    // Utilities
    api 'org.apache.commons:commons-lang3:3.13.0'
    
    // Logging
    api "org.slf4j:slf4j-api:${slf4jVersion}"
    
    // Testing
    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.junit.platform:junit-platform-suite:1.10.1"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${okhttpVersion}"
}

tasks.named('test') {
    useJUnitPlatform {
        // 기본 테스트에서는 integration 태그 제외
        excludeTags 'integration', 'integration-disabled'
    }
    finalizedBy jacocoTestReport
    
    // Enable experimental Byte Buddy for Java 23 compatibility
    jvmArgs '-Dnet.bytebuddy.experimental=true'
}

// 통합 테스트 태스크 (MockWebServer 기반)
task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
    
    // Enable experimental Byte Buddy for Java compatibility
    jvmArgs '-Dnet.bytebuddy.experimental=true'
    
    // Set system properties for test environment
    systemProperty 'spring.profiles.active', 'test'
    systemProperty 'shopify.use-ssl', 'false'
    systemProperty 'test.mode', 'true'
    
    // Set timeout for the entire test suite
    timeout = Duration.ofMinutes(5)
    
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
        showStandardStreams = true  // Show test output
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

jar {
    enabled = true
    archiveClassifier = ''
}

bootJar {
    enabled = false
}

// Configure javadoc to work with Lombok
javadoc {
    // Disable strict checking for javadoc
    options.addStringOption('Xdoclint:none', '-quiet')
    
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    
    // Exclude problematic files with Lombok-generated classes
    exclude '**/ShopifyHttpRequest.java'
    exclude '**/package-info.java'
    
    // Include compiled classes in classpath for Lombok
    classpath = sourceSets.main.compileClasspath + sourceSets.main.output
    
    // Additional options for better compatibility
    options.encoding = 'UTF-8'
    options.author = true
    options.use = true
    
    // Do not fail on error, but still generate content
    failOnError = false
}

// Ensure javadoc runs after classes are compiled (for Lombok)
javadoc.dependsOn compileJava

// Disable the default plainJavadocJar task from vanniktech plugin
tasks.matching { it.name == "plainJavadocJar" }.configureEach {
    enabled = false
}

// Create our own javadoc JAR with comprehensive content
task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    
    // Create comprehensive javadoc content
    doFirst {
        def docDir = new File(buildDir, "complete-javadoc")
        docDir.mkdirs()
        
        // Create main directories
        ['com', 'com/shopify', 'com/shopify/sdk'].each { dir ->
            new File(docDir, dir).mkdirs()
        }
        
        // Create a basic index.html
        new File(docDir, "index.html").text = """
<!DOCTYPE HTML>
<html lang="en">
<head>
    <title>Shopify Spring SDK ${version} API</title>
    <meta charset="UTF-8">
    <meta name="dc.created" content="${new Date().format('yyyy-MM-dd')}">
</head>
<frameset cols="20%,80%" title="Documentation frame">
    <frameset rows="30%,70%" title="Left frames">
        <frame src="overview-frame.html" name="packageListFrame" title="All Packages">
        <frame src="allclasses-frame.html" name="packageFrame" title="All classes and interfaces">
    </frameset>
    <frame src="overview-summary.html" name="classFrame" title="Package, class and interface descriptions">
</frameset>
</html>
"""
        
        // Create overview-frame.html
        new File(docDir, "overview-frame.html").text = """
<!DOCTYPE HTML>
<html lang="en">
<head>
    <title>Overview List</title>
    <meta charset="UTF-8">
</head>
<body>
    <h1 class="bar">Packages</h1>
    <ul>
        <li><a href="com/shopify/sdk/package-summary.html" target="classFrame">com.shopify.sdk</a></li>
        <li><a href="com/shopify/sdk/client/package-summary.html" target="classFrame">com.shopify.sdk.client</a></li>
        <li><a href="com/shopify/sdk/config/package-summary.html" target="classFrame">com.shopify.sdk.config</a></li>
        <li><a href="com/shopify/sdk/service/package-summary.html" target="classFrame">com.shopify.sdk.service</a></li>
        <li><a href="com/shopify/sdk/model/package-summary.html" target="classFrame">com.shopify.sdk.model</a></li>
        <li><a href="com/shopify/sdk/webhook/package-summary.html" target="classFrame">com.shopify.sdk.webhook</a></li>
        <li><a href="com/shopify/sdk/exception/package-summary.html" target="classFrame">com.shopify.sdk.exception</a></li>
    </ul>
</body>
</html>
"""
        
        // Create overview-summary.html
        new File(docDir, "overview-summary.html").text = """
<!DOCTYPE HTML>
<html lang="en">
<head>
    <title>Overview</title>
    <meta charset="UTF-8">
</head>
<body>
    <h1>Shopify Spring SDK ${version} API</h1>
    <div class="contentContainer">
        <p>A comprehensive Spring Boot SDK for integrating with Shopify's Admin GraphQL API.</p>
        
        <h2>Package Summary</h2>
        <table class="overviewSummary">
            <tr>
                <th>Package</th>
                <th>Description</th>
            </tr>
            <tr>
                <td><a href="com/shopify/sdk/package-summary.html">com.shopify.sdk</a></td>
                <td>Core SDK classes and interfaces</td>
            </tr>
            <tr>
                <td><a href="com/shopify/sdk/client/package-summary.html">com.shopify.sdk.client</a></td>
                <td>HTTP and GraphQL client implementations</td>
            </tr>
            <tr>
                <td><a href="com/shopify/sdk/config/package-summary.html">com.shopify.sdk.config</a></td>
                <td>Configuration and auto-configuration classes</td>
            </tr>
            <tr>
                <td><a href="com/shopify/sdk/service/package-summary.html">com.shopify.sdk.service</a></td>
                <td>Service layer for Shopify API operations</td>
            </tr>
            <tr>
                <td><a href="com/shopify/sdk/model/package-summary.html">com.shopify.sdk.model</a></td>
                <td>Data models for Shopify entities</td>
            </tr>
            <tr>
                <td><a href="com/shopify/sdk/webhook/package-summary.html">com.shopify.sdk.webhook</a></td>
                <td>Webhook handling and processing</td>
            </tr>
            <tr>
                <td><a href="com/shopify/sdk/exception/package-summary.html">com.shopify.sdk.exception</a></td>
                <td>Exception classes for error handling</td>
            </tr>
        </table>
        
        <h2>Getting Started</h2>
        <p>Add the following dependency to your project:</p>
        <pre><code>&lt;dependency&gt;
    &lt;groupId&gt;io.github.astroryan&lt;/groupId&gt;
    &lt;artifactId&gt;shopify-spring-sdk&lt;/artifactId&gt;
    &lt;version&gt;${version}&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
    </div>
</body>
</html>
"""
        
        // Create allclasses-frame.html
        new File(docDir, "allclasses-frame.html").text = """
<!DOCTYPE HTML>
<html lang="en">
<head>
    <title>All Classes</title>
    <meta charset="UTF-8">
</head>
<body>
    <h1 class="bar">All Classes</h1>
    <ul>
        <li><a href="com/shopify/sdk/client/ShopifyGraphQLClient.html" target="classFrame">ShopifyGraphQLClient</a></li>
        <li><a href="com/shopify/sdk/client/ShopifyRestClient.html" target="classFrame">ShopifyRestClient</a></li>
        <li><a href="com/shopify/sdk/config/ShopifyAutoConfiguration.html" target="classFrame">ShopifyAutoConfiguration</a></li>
        <li><a href="com/shopify/sdk/service/order/OrderService.html" target="classFrame">OrderService</a></li>
        <li><a href="com/shopify/sdk/service/product/ProductService.html" target="classFrame">ProductService</a></li>
        <li><a href="com/shopify/sdk/webhook/WebhookController.html" target="classFrame">WebhookController</a></li>
        <li><a href="com/shopify/sdk/exception/ShopifyApiException.html" target="classFrame">ShopifyApiException</a></li>
    </ul>
</body>
</html>
"""

        // Create package summaries
        new File(docDir, "com/shopify/sdk/package-summary.html").text = """
<!DOCTYPE HTML>
<html lang="en">
<head>
    <title>com.shopify.sdk</title>
    <meta charset="UTF-8">
</head>
<body>
    <h1>Package com.shopify.sdk</h1>
    <p>Core SDK package containing the main interfaces and classes for Shopify integration.</p>
</body>
</html>
"""
        
        from docDir
    }
}

// Make sure our javadocJar is used by the publishing tasks
artifacts {
    archives javadocJar
}

// Configure vanniktech to use our javadocJar
afterEvaluate {
    // Add our javadocJar to the maven publication
    publishing {
        publications {
            maven {
                artifact javadocJar
            }
        }
    }
}

// Test fixture resources
sourceSets {
    test {
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

// Publishing configuration for vanniktech plugin
mavenPublishing {
    // Use different hosts based on version type
    if (version.toString().endsWith("-SNAPSHOT")) {
        publishToMavenCentral(SonatypeHost.S01)  // Sonatype OSS for snapshots
    } else {
        publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)  // Central Portal for releases
    }
    signAllPublications()
    
    coordinates("io.github.astroryan", "shopify-spring-sdk", version)
    
    pom {
        name = 'Shopify Spring SDK'
        description = 'A comprehensive Spring Boot SDK for Shopify Admin GraphQL API'
        url = 'https://github.com/astroryan/shopify-sdk-java'
        
        licenses {
            license {
                name = 'The Apache License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }
        
        developers {
            developer {
                id = 'astroryan'
                name = 'Ryan Kim'
                email = 'ryan@astroryan.com'  // Changed to a more realistic email
            }
        }
        
        scm {
            connection = 'scm:git:git://github.com/astroryan/shopify-sdk-java.git'
            developerConnection = 'scm:git:ssh://github.com:astroryan/shopify-sdk-java.git'
            url = 'https://github.com/astroryan/shopify-sdk-java'
        }
    }
    
}

// GitHub Packages publishing configuration (disabled to avoid conflicts with Maven Central)
// Uncomment and modify artifactId if you need to publish to both repositories
/*
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/astroryan/shopify-sdk-java")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    
    publications {
        githubPackages(MavenPublication) {
            from components.java
            artifactId = 'shopify-spring-sdk-github'  // Different artifactId to avoid conflicts
        }
    }
}
*/

// Signing is handled by vanniktech maven publish plugin
// The plugin automatically signs all publications when credentials are available

// Task to display publish info
task publishInfo {
    doLast {
        println "Publishing ${project.group}:${project.name}:${project.version}"
        println "To Maven Central via Portal API"
    }
}