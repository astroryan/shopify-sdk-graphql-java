name: CI/CD Pipeline

on:
  pull_request:
    branches: [ develop, release ]
    types: [ closed ]
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.1.0)'
        required: true
        default: '1.1.0'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Build with Gradle
      run: ./gradlew clean build
        
    - name: Run unit tests
      run: ./gradlew test
        
    - name: Generate test report
      if: always()
      run: ./gradlew jacocoTestReport
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: build/reports/tests/test/
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        directory: ./build/reports/jacoco/test/
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
  integration-test:
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'develop' || github.event.pull_request.base.ref == 'release')) || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Run integration tests
      run: |
        if [ -z "${{ secrets.SHOPIFY_TEST_STORE_DOMAIN }}" ]; then
          echo "⚠️ Skipping integration tests - SHOPIFY_TEST_STORE_DOMAIN secret not configured"
          echo "Set up secrets in repository settings to enable integration tests"
          # Run integration tests anyway to verify they compile and skip properly
          ./gradlew integrationTest --info --stacktrace || true
        else
          echo "✅ Running integration tests with configured store"
          ./gradlew integrationTest --info --stacktrace
        fi
      env:
        SHOPIFY_TEST_STORE_DOMAIN: ${{ secrets.SHOPIFY_TEST_STORE_DOMAIN }}
        SHOPIFY_TEST_ACCESS_TOKEN: ${{ secrets.SHOPIFY_TEST_ACCESS_TOKEN }}
      continue-on-error: true
        
    - name: Integration test status
      run: |
        if [ -z "${{ secrets.SHOPIFY_TEST_STORE_DOMAIN }}" ]; then
          echo "⚠️ Integration tests may be skipped - SHOPIFY_TEST_STORE_DOMAIN secret not configured"
          echo "Set up secrets in repository settings to enable integration tests"
        else
          echo "✅ Integration tests configured with test store domain"
        fi
        
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'
        
    - name: Run SpotBugs
      run: ./gradlew spotbugsMain || true
        
    - name: Check code style
      run: ./gradlew checkstyleMain || true

  publish:
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: >
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'develop' || github.event.pull_request.base.ref == 'release')) ||
      github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Set version based on branch
      run: |
        BASE_VERSION=$(grep "version = " build.gradle | sed "s/version = '//" | sed "s/'.*//")
        CLEAN_VERSION=$(echo $BASE_VERSION | sed 's/-SNAPSHOT//' | sed 's/-RELEASE//')
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual dispatch - use provided version
          NEW_VERSION="${{ github.event.inputs.version }}"
        elif [ "${{ github.event.pull_request.base.ref }}" = "develop" ]; then
          # Develop branch - SNAPSHOT with auto increment
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BUILD_NUMBER=${{ github.run_number }}
          NEW_VERSION="${CLEAN_VERSION}-SNAPSHOT-${BUILD_NUMBER}"
        elif [ "${{ github.event.pull_request.base.ref }}" = "release" ]; then
          # Release branch - RELEASE version
          NEW_VERSION="${CLEAN_VERSION}-RELEASE"
        else
          # Default case
          NEW_VERSION="${CLEAN_VERSION}"
        fi
        
        echo "Original version: $BASE_VERSION"
        echo "New version: $NEW_VERSION"
        sed -i "s/version = '.*'/version = '$NEW_VERSION'/" build.gradle
        
        echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        
    - name: Display version info
      run: |
        echo "🏷️ Publishing version: $VERSION"
        echo "📦 Target branch: ${{ github.event.pull_request.base.ref }}"
        case "${{ github.event.pull_request.base.ref }}" in
          "develop")
            echo "🔄 SNAPSHOT version for development"
            ;;
          "release")
            echo "🚀 RELEASE version for production"
            ;;
          *)
            echo "⚙️ Manual or release version"
            ;;
        esac
        
    - name: Publish to GitHub Packages
      run: ./gradlew publish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create GitHub Release for production
      if: github.event.pull_request.base.ref == 'release'
      run: |
        # Make release script executable
        chmod +x .github/scripts/generate-release-notes.sh
        
        # Generate release notes
        .github/scripts/generate-release-notes.sh $VERSION
        
        # Create git tag
        git tag v$VERSION
        git push origin v$VERSION
        
        # Create GitHub release
        gh release create v$VERSION \
          --title "Shopify Spring SDK v$VERSION" \
          --notes-file release_notes.md \
          --target release \
          --verify-tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create release notes
      if: github.event_name == 'release'
      run: |
        echo "## Shopify Spring SDK ${{ github.event.release.tag_name }}" > release-notes.md
        echo "" >> release-notes.md
        echo "### Installation" >> release-notes.md
        echo "" >> release-notes.md
        echo "Add to your \`build.gradle\`:" >> release-notes.md
        echo "\`\`\`gradle" >> release-notes.md
        echo "repositories {" >> release-notes.md
        echo "    maven {" >> release-notes.md
        echo "        url = uri(\"https://maven.pkg.github.com/astroryan/shopify-sdk-java\")" >> release-notes.md
        echo "        credentials {" >> release-notes.md
        echo "            username = project.findProperty(\"gpr.user\") ?: System.getenv(\"USERNAME\")" >> release-notes.md
        echo "            password = project.findProperty(\"gpr.key\") ?: System.getenv(\"TOKEN\")" >> release-notes.md
        echo "        }" >> release-notes.md
        echo "    }" >> release-notes.md
        echo "}" >> release-notes.md
        echo "" >> release-notes.md
        echo "dependencies {" >> release-notes.md
        echo "    implementation 'com.shopify:shopify-spring-sdk:${{ github.event.release.tag_name }}'" >> release-notes.md
        echo "}" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        
    - name: Update release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: release-notes.md
        append_body: true
